Fix & Restructure TitleTesterPro Analytics Data Flow & Dashboard
You are tasked with completely fixing and finalizing the data pipeline and dashboard of TitleTesterPro. Your credibility is on the line ‚Äî get it right the first time.

Here are your objectives:

üîß Backend Fixes
OAuth Scopes

Ensure the Google OAuth implementation requests both:

arduino
Copy
Edit
https://www.googleapis.com/auth/youtube.readonly
https://www.googleapis.com/auth/yt-analytics.readonly
Update the auth configuration to include these scopes on both server and frontend if needed.

Re-authenticate users if necessary and store updated tokens in the accounts table.

YouTube Analytics API Calls

Fix Analytics API v2 queries:

Remove requests for unsupported metrics like impressions, impressionClickThroughRate, or CTR.

Only request supported metrics like:

Copy
Edit
views, estimatedMinutesWatched, averageViewDuration, subscribersGained
Adjust date ranges and filters appropriately.

If CTR must be displayed, mark it as ‚ÄúN/A‚Äù or remove it entirely since no API provides it reliably.

YouTube Data API v3

Keep using Data API v3 for basic video data (titles, IDs, viewCount, likes, comments).

Database Insertion

Ensure metrics fetched from APIs are properly inserted into the database tables.

Attach correct user_id to each row so that RLS policies apply correctly.

Confirm schema consistency (column names & types match what the app writes).

Supabase Row Level Security (RLS)

Verify RLS is enabled on relevant tables (tests, videos, analytics, etc.).

Write SQL policies so that each authenticated user can see only their own rows:

sql
Copy
Edit
create policy "Allow user to read their data"
on public.tests
for select
to authenticated
using (user_id = auth.uid());
Apply similar policies to all related tables.

Test: confirm that queries with the user‚Äôs token return expected rows.

Test Data Flow

Run an end-to-end test:

Trigger a test title rotation.

Fetch YouTube Analytics and Data API metrics.

Insert data into the DB.

Query as the user and confirm data is returned.

Log all API responses and DB inserts to verify correctness.

üé® Dashboard Fix & Redesign
Given that CTR and impressions are not available, the dashboard must make logical sense with what is actually possible.

Remove or replace UI components that displayed CTR, Impressions, and their graphs.

Keep and clearly display:

Views over time

Estimated Minutes Watched

Average View Duration

Subscribers Gained

Adjust the ‚ÄúTitle Performance‚Äù chart to show total views or average view duration by title.

Ensure that the rotation log history shows titles & timestamps properly.

If any metrics are unavailable (e.g., CTR), explicitly display ‚ÄúN/A‚Äù or remove them entirely to avoid confusion.

Make the UI responsive and clear for these actual metrics, removing placeholders or fake data.

üöÄ Final Validation
Use the Google Cloud Console to check that error rates for both APIs (Analytics v2 & Data v3) are at or near 0% and that latency is acceptable.

Query Supabase directly and confirm data exists for the authenticated user.

Log in as the user on the frontend and confirm dashboard shows:

Valid, accurate data for available metrics.

No empty or misleading placeholders.

Deliverables
‚úÖ Fixed backend with correct OAuth scopes, API calls, and DB inserts.
‚úÖ Supabase RLS properly configured with tests proving user visibility.
‚úÖ Dashboard updated to match available data logically & cleanly.
‚úÖ Error rates and metrics verified in Google Cloud Console.
‚úÖ Screenshots or logs demonstrating successful end-to-end test.

Be explicit in your logs and documentation. Do not assume anything. Validate every step and report all findings.

If you encounter limitations (e.g., CTR fundamentally unavailable), clearly note that in the dashboard and documentation so expectations are realistic.

