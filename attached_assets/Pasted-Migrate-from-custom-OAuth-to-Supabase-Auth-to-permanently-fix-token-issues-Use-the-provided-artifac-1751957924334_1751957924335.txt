Migrate from custom OAuth to Supabase Auth to permanently fix token issues. Use the provided artifact supabase-auth-implementation for all code.
Step 1: Install Dependencies
bashnpm install @supabase/supabase-js
Step 2: Create New Files
Create these files from the artifact supabase-auth-implementation:

server/auth/supabase.ts - Supabase client setup
server/routes/auth-supabase.ts - New auth routes
server/youtubeService-supabase.ts - Updated YouTube service
server/middleware/auth.ts - Auth middleware

Step 3: Update Environment Variables
Ensure .env has:
SUPABASE_URL=your_supabase_url
SUPABASE_ANON_KEY=your_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
CLIENT_URL=http://localhost:5000
Step 4: Update Routes
In server/routes.ts:
typescriptimport authSupabaseRoutes from './routes/auth-supabase';
import { injectSessionToken } from './middleware/auth';

// Add session token middleware
app.use(injectSessionToken);

// Replace old OAuth routes with Supabase routes
app.use(authSupabaseRoutes);

// Remove old passport routes
// DELETE: app.use('/api/auth', oauthRoutes);
Step 5: Replace YouTube Service
bash# Backup old service
mv server/youtubeService.ts server/youtubeService.old.ts

# Use new Supabase version
mv server/youtubeService-supabase.ts server/youtubeService.ts
Step 6: Clean Up Old OAuth

Delete server/passportConfig.ts
Delete server/routes/oauth.ts
Remove from package.json:

passport
passport-google-oauth20
express-session


Run npm uninstall passport passport-google-oauth20 express-session

Step 7: Update Frontend Auth Links
In any component with login/logout buttons:
typescript// Login
<a href="/api/auth/google">Sign in with Google</a>

// Logout
const handleLogout = async () => {
  await fetch('/api/auth/signout', { method: 'POST' });
  window.location.href = '/';
};
Step 8: Configure Supabase Dashboard
Manual Step Required:

Go to your Supabase dashboard
Navigate to Authentication > Providers
Enable Google provider
Add your Google OAuth credentials (same ones from current setup)
Set redirect URL to: https://[your-project].supabase.co/auth/v1/callback

Step 9: Test Complete Flow

Clear all cookies
Sign out completely
Click "Sign in with Google"
Complete OAuth flow
Verify videos load without errors
Check that tokens persist across page refreshes

Step 10: Update Error Handling
In client/src/components/FuturisticVideoSelector.tsx, update error message:
typescriptif (error?.message?.includes('expired')) {
  return (
    <div className="text-center p-6">
      <p className="text-red-600 mb-4">Session expired</p>
      <a 
        href="/api/auth/google"
        className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 inline-block"
      >
        Sign in again
      </a>
    </div>
  );
}