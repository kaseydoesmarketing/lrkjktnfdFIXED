-- Migration: Transform to Account-Based Architecture
-- This migration transforms the user-based schema to a multi-tenant account-based schema

-- Enable extensions (pgcrypto provides gen_random_uuid)
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Create accounts table if not exists
CREATE TABLE IF NOT EXISTS accounts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(100) UNIQUE NOT NULL,
    plan_type VARCHAR(50) DEFAULT 'free',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create account_memberships table
CREATE TABLE IF NOT EXISTS account_memberships (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    account_id UUID NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    role VARCHAR(50) NOT NULL DEFAULT 'member',
    permissions JSONB DEFAULT '[]',
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, account_id)
);

-- Create channels table (renamed from youtube_channels)
CREATE TABLE IF NOT EXISTS channels (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    account_id UUID NOT NULL REFERENCES accounts(id) ON DELETE CASCADE,
    youtube_channel_id VARCHAR(100) NOT NULL,
    channel_name VARCHAR(255) NOT NULL,
    access_token_encrypted TEXT,
    refresh_token_encrypted TEXT,
    token_expires_at TIMESTAMP WITH TIME ZONE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(account_id, youtube_channel_id)
);

-- Migrate existing data if tables exist
DO $$
BEGIN
    -- Check if profiles table exists and has data
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'profiles') THEN
        -- Create accounts for existing users
        INSERT INTO accounts (id, name, slug, plan_type, created_at)
        SELECT 
            gen_random_uuid(),
            COALESCE(p.display_name, p.email),
            LOWER(REPLACE(COALESCE(p.display_name, SPLIT_PART(p.email, '@', 1)), ' ', '-')),
            CASE 
                WHEN p.subscription_tier = 'authority' THEN 'authority'
                WHEN p.subscription_tier = 'pro' THEN 'pro'
                ELSE 'free'
            END,
            p.created_at
        FROM profiles p
        ON CONFLICT (slug) DO NOTHING;
        
        -- Create account memberships
        INSERT INTO account_memberships (user_id, account_id, role)
        SELECT 
            p.id::UUID,
            a.id,
            'owner'
        FROM profiles p
        JOIN accounts a ON a.slug = LOWER(REPLACE(COALESCE(p.display_name, SPLIT_PART(p.email, '@', 1)), ' ', '-'));
    END IF;
    
    -- Migrate youtube_channels to channels
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'youtube_channels') THEN
        INSERT INTO channels (
            id,
            account_id,
            youtube_channel_id,
            channel_name,
            access_token_encrypted,
            refresh_token_encrypted,
            token_expires_at,
            created_at
        )
        SELECT 
            yc.id,
            am.account_id,
            yc.channel_id,
            yc.title,
            yc.access_token_encrypted,
            yc.refresh_token_encrypted,
            yc.token_expires_at,
            yc.created_at
        FROM youtube_channels yc
        JOIN account_memberships am ON am.user_id = yc.user_id::UUID
        ON CONFLICT DO NOTHING;
    END IF;
END $$;

-- Update tests table to add account_id
ALTER TABLE tests ADD COLUMN IF NOT EXISTS account_id UUID;
ALTER TABLE tests ADD COLUMN IF NOT EXISTS channel_id UUID;
ALTER TABLE tests ADD COLUMN IF NOT EXISTS created_by UUID;

-- Migrate test data
UPDATE tests t
SET 
    account_id = am.account_id,
    channel_id = c.id,
    created_by = yc.user_id::UUID
FROM youtube_channels yc
JOIN channels c ON c.youtube_channel_id = yc.channel_id
JOIN account_memberships am ON am.user_id = yc.user_id::UUID
WHERE t.youtube_channel_id = yc.id
AND t.account_id IS NULL;

-- Add constraints after data migration
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'tests_account_id_fkey'
    ) THEN
        ALTER TABLE tests ADD CONSTRAINT tests_account_id_fkey 
        FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE;
    END IF;
    
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'tests_channel_id_fkey'
    ) THEN
        ALTER TABLE tests ADD CONSTRAINT tests_channel_id_fkey 
        FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_channels_account_id ON channels(account_id);
CREATE INDEX IF NOT EXISTS idx_tests_account_channel ON tests(account_id, channel_id);
CREATE INDEX IF NOT EXISTS idx_account_memberships_user ON account_memberships(user_id);
CREATE INDEX IF NOT EXISTS idx_account_memberships_account ON account_memberships(account_id);

-- Add updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add triggers for updated_at
CREATE TRIGGER update_accounts_updated_at BEFORE UPDATE ON accounts
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    
CREATE TRIGGER update_channels_updated_at BEFORE UPDATE ON channels
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();